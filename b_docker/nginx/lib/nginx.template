user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
  worker_connections  1024;
}

http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;

  resolver 0.0.0.0 valid=300s ipv6=off;
  resolver_timeout 10s;

  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

  access_log  /var/log/nginx/access.log  main;

  # Set PHP maximum upload limit (shouldn't be any larger than this).
	client_max_body_size 13m;
	index                index.php index.html index.htm;

  # Optimize response to requests
  # -----------------------------
  # More info can be found on this link: https://goo.gl/HCy2qo
  #
  server_tokens       off;
  sendfile            off;
  tcp_nopush          on;
  tcp_nodelay         off;
  keepalive_timeout   65;

  # Enable response compression using `gzip` method
  # This often helps to reduce the size of transmitted data by half or even more.
  gzip              on;
  gzip_http_version 1.0;
  gzip_comp_level   2;
  gzip_proxied      any;

  # Server Names Optimizations:
  # --------------------------
  # If a large number of server names are defined, or unusually long server names
  # are defined, tuning the @{server_names_hash_max_size} and
  # @{server_names_hash_bucket_size} directives at the http level may become necessary.
  #
  # The default value of the @{server_names_hash_bucket_size} directive may be
  # equal to 32, or 64, or another value, depending on CPU cache line size.
  # If the default value is 32 and server name is defined as “too.long.server.name.example.org”
  #
  server_names_hash_bucket_size 128;
  server_names_hash_max_size 20000;

  # Set the bucket size for hash tables used by the
  #  @{proxy_hide_header} and @{proxy_set_header} directives
  proxy_headers_hash_bucket_size 128;
  proxy_headers_hash_max_size 20000;

  include fastcgi.conf;
  include fastcgi_params;

	# Upstream to abstract backend connection(s) for PHP.
  # this should match value of "listen" directive in php-fpm pool
	upstream php {
		server ${PHP_FPM_SOCK};
	}

  include /etc/nginx/conf.d/*.conf;
}
